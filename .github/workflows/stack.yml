name: Build by Stack
on:
  push:
    branches:
      - master
      - ci*
    tags:
      - v*
  pull_request:
    branches:
      - master
      - ci*
  workflow_dispatch:

# For making a release, we need write permissions.
# TODO: if we split out a release job from the build job, we could make permissions more fine-grained.
permissions:
  contents: write

jobs:
  check:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        ghc-ver: [9.2.4, 9.0.2, 8.10.7, 8.8.4, 8.6.5, 8.4.4, 8.2.2, 8.0.2]
      fail-fast: false
    env:
      ARGS: "--stack-yaml stack-${{ matrix.ghc-ver }}.yaml --no-terminal --system-ghc"

    # Needed for Windows to make piping (... >> ...) and evaluation ( $(...) ) work.
    defaults:
      run:
        shell: bash

    steps:
    - uses: actions/checkout@v3
    - uses: haskell/actions/setup@v2
      id: haskell-setup
      with:
        ghc-version: ${{ matrix.ghc-ver }}
        stack-version: '2.9.1'

    - name: Set environment variables based on Haskell setup
      run: |
        export STACK_VER=$(stack --numeric-version)
        echo "STACK_VER=${STACK_VER}" >> ${GITHUB_ENV}

    - uses: actions/cache@v3
      name: Cache dependencies
      id: cache
      with:
        path: ${{ steps.haskell-setup.outputs.stack-root }}
        # A unique cache is used for each stack.yaml.
        key: ${{ runner.os }}-stack-without-ghc-${{ env.STACK_VER }}-${{ hashFiles(format('stack-{0}.yaml', matrix.ghc-ver)) }}

    - name: Install the numa library (Ubuntu, GHC 8.4.4)
      if: ${{ runner.os == 'Linux' && matrix.ghc-ver == '8.4.4' }}
      run: |
        sudo apt-get install libnuma-dev -qq

    - name: Install dependencies
      if: ${{ !steps.cache.outputs.cache-hit }}
      run: |
        stack build ${ARGS} --only-dependencies

    - name: Build fix-whitespace
      run: |
        stack build ${ARGS}

    - name: Check the whitespace issue
      run: |
        stack exec ${ARGS} -- fix-whitespace --check

    - name: Get fix-whitespace version
      run: |
        export FIXW_EXE=$(stack path --local-install-root ${ARGS})/bin/fix-whitespace
        export FIXW_VERSION=$(${FIXW_EXE} --numeric-version)
        # Save env variables for the next steps
        echo "FIXW_EXE=${FIXW_EXE}"         >> ${GITHUB_ENV}
        echo "FIXW_VERSION=${FIXW_VERSION}" >> ${GITHUB_ENV}

    ## Release
    ########################################################################

    - name: Source tarball creation.
      # Conditional to ensure this deployment is only run once per action.
      if: >-
        startsWith(github.ref, 'refs/tags/v')
        && matrix.ghc-ver == '9.2.4'
      run: |
        export DIST_TGZ=$(cabal sdist source | tail -1)
        echo "DIST_TGZ=${DIST_TGZ}" >> ${GITHUB_ENV}

    - name: Source tarball release.
      if: >-
        startsWith(github.ref, 'refs/tags/v')
        && matrix.ghc-ver == '9.2.4'
      uses: softprops/action-gh-release@v1
      with:
        draft: true
        prerelease: true
        files: |
          ${{ env.DIST_TGZ }}


    - name: Linux release preparation.
      if: >-
        startsWith(github.ref, 'refs/tags/v')
        && runner.os == 'Linux'
        && matrix.ghc-ver == '9.2.4'
      run: |
        export FIXW_BIN=fix-whitespace-${FIXW_VERSION}-linux.binary
        cp -p ${FIXW_EXE} ${FIXW_BIN}
        # Save env variables for the next step
        echo "FIXW_BIN=${FIXW_BIN}" >> ${GITHUB_ENV}

    - name: Linux release.
      if: >-
        startsWith(github.ref, 'refs/tags/v')
        && runner.os == 'Linux'
        && matrix.ghc-ver == '9.2.4'
      uses: softprops/action-gh-release@v1
      with:
        draft: true
        prerelease: true
        files: |
          ${{ env.FIXW_BIN }}


    - name: Mac release preparation.
      if: >-
        startsWith(github.ref, 'refs/tags/v')
        && runner.os == 'macOS'
      run: |
        export FIXW_BIN=fix-whitespace-${FIXW_VERSION}-mac.binary
        # Raw Mac binary
        cp -p ${FIXW_EXE} ${FIXW_BIN}
        # Save env variables for the next step
        echo "FIXW_BIN=${FIXW_BIN}" >> ${GITHUB_ENV}

    - name: Mac release.
      if: >-
        startsWith(github.ref, 'refs/tags/v')
        && runner.os == 'macOS'
      uses: softprops/action-gh-release@v1
      with:
        draft: true
        prerelease: true
        files: |
          ${{ env.FIXW_BIN }}


    - name: Windows release preparation.
      if: >-
        startsWith(github.ref, 'refs/tags/v')
        && runner.os == 'Windows'
      shell: bash
      run: |
        export FIXW_VER_EXE=fixw-${FIXW_VERSION}.exe
        cp -p ${FIXW_EXE}.exe ${FIXW_VER_EXE}
        # Save env variables for the next step
        echo "FIXW_VER_EXE=${FIXW_VER_EXE}" >> ${GITHUB_ENV}

    - name: Windows release.
      if: >-
        startsWith(github.ref, 'refs/tags/v')
        && runner.os == 'Windows'
      uses: softprops/action-gh-release@v1
      with:
        draft: true
        prerelease: true
        files: |
          ${{ env.FIXW_VER_EXE }}
